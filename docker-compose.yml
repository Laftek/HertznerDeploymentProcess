# Purpose: Defines all services needed for the application stack including:
# - The C# application container
# - PostgreSQL database
# - Nginx web server with SSL support
# - Certbot for SSL certificate automation
# - Gotty for web-based terminal access
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DB_CONNECTION_STRING=Host=db;Database=yourdbname;Username=youruser;Password=${DB_PASSWORD}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
    restart: unless-stopped
    depends_on:
      - db
    volumes:
      - ./logs:/app/logs
    # This will make the container output available to gotty
    tty: true

  db:
    image: postgres:15
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=youruser
      - POSTGRES_DB=yourdbname
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app
      - gotty
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  gotty:
    image: sorenisanerd/gotty:latest
    command: --credential ${GOTTY_USER}:${GOTTY_PASSWORD} docker attach myapp_app_1
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    depends_on:
      - app
    network_mode: "host"

volumes:
  postgres-data: